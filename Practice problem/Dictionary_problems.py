# dictionary practice problem


"""
1. Create a dictionary to store information about a book (title, author, year)."""

book_info = {
    "title": "PMB",
    "author": "RIR",
    "year": 2025
}

# print("মূল ডিকশনারি:", book_info)

"""2. Add a new key called "rating" and give it a value."""

book_info["rating"] = 4.5
# print("\nরেটিং যোগ করার পর:", book_info)

"""3. Remove the "year" key."""

book_info.pop("year")
# print("\nবছর রিমুভ করার পর:", book_info)

"""4. Loop through the dictionary and print each key and value."""

# print("\nডিকশনারি আইটেমগুলো:")
for key, value in book_info.items():
    print(f"{key}: {value}")

"""5. Use the get() method to retrieve the value of a key named "author" from the dictionary.
"""
author = book_info.get("author")
# print(f"\nলেখক: {author}")

"""6. Check if the key "author" exists in the dictionary,
 and print a message like "Author found" or "Author not found"."""

if "author" in book_info:
    print("\nAuthor found ✅")
else:
    print("\nAuthor not found ❌")





"""
1. Write a Python program to sort Counter by value.

Sample Input                 
{'Math':81, 'Physics':83,Chemistry':87} 
Sample Output
[('Chemistry', 87), ('Physics', 83),
'Math', 81)]
"""
dict = {"Math":81, "Physics":83,"Chemistry":87}
sorted_dict = sorted(dict.items(), key= lambda value : value [1], reverse= True )
print(sorted_dict)




"""
2. Write a Python program to combine values in a list of dictionaries.

Sample Input 
[{'item': 'item1', 'amount': 400},
{'item': 'item2', 'amount': 300},
{'item': 'item1', 'amount': 750}]
Sample Output
{'item1': 1150, 'item2': 300}
"""
data = [
{'item': 'item1', 'amount': 400},
{'item': 'item2', 'amount': 300},
{'item': 'item1', 'amount': 750}
]
result = {}
for entry in data:
    item = entry [item]
    amount = entry [amount]
    if item in result:
        
        

"""
3. Write a Python program to create a dictionary from a string.
Note: Track the count of the letters from the string.
Sample Input 
'w3resource' 
Sample Output
{'w': 1, '3': 1, 'r': 2, 'e': 2, 's': 1, 'o': 1, 'u':
1, 'c': 1}
"""


"""
4. Create a dictionary by extracting the keys from a given dictionary

Sample Input
sample_dict = {
"name": "Kelly",
"age": 25,
"salary": 8000,
"city": "New york"}
Keys to extract
keys = ["name", "salary"]
Sample Output
{'name': 'Kelly', 'salary': 8000}
"""


"""
5. Write a Python program to convert a list to a list of dictionaries.
Sample Input Sample Output
["Black", "Red", "Maroon", "Yellow"],
["#000000", "#FF0000", "#800000",
"#FFFF00"]
[{'color_name': 'Black', 'color_code':
'#000000'},
{'color_name': 'Red', 'color_code':
'#FF0000'},
{'color_name': 'Maroon', 'color_code':
'#800000'},
{'color_name': 'Yellow', 'color_code':
'#FFFF00'}]
"""


"""
6. Write a Python program that takes a sentence as input and calculates the frequency of
each word. The program should output a dictionary where keys are unique words, and
values are the frequencies of those words.
Sample Input Sample Output
the quick brown fox jumps over the
lazy dog the lazy dog barks"
{'the': 3, 'quick': 1, 'brown': 1, 'fox': 1,
'jumps': 1, 'over': 1, 'lazy': 2, 'dog': 2,
'barks': 1}
"""


"""
7. Given a list of integers, write a Python program to create a dictionary where the keys are
the integers, and the values are their squares, but only for odd integers.
_______________________________________________________________________
Sample Input                     |   Sample Output
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  |  {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
_________________________________|______________________________________
"""





"""
8. UIU database has a dictionary containing student data. Each key is a student's name,
and the corresponding value is a dictionary with information such as the student's name,
major, CGPA (Cumulative Grade Point Average), and completed credits. Imagine you
are a software engineer working at UIU, you are assigned to write a Python program that
will transform this dictionary filled with redundancy into an optimized one.
Now, Create a new dictionary with the same student names as keys and values
generated by extracting each student's "cgpa" and "completed_credits" information and
arrange them sorted based on their CGPA.
__________________________________________________________________________________
Sample Input                       
Original student data:
{
'Emma': {'name': 'Emma', 'major':
'Computer Science', 'cgpa': 3.8,
'completed_credits': 90},
'Daniel': {'name': 'Daniel', 'major':
'Electrical Engineering', 'cgpa': 3.5,
'completed_credits': 75},
'Sophia': {'name': 'Sophia', 'major':
'Mechanical Engineering', 'cgpa': 3.2,
'completed_credits': 60}
}

Sample Output
Transformed student data:
{
'Emma': {'cgpa': 3.8,
'completed_credits': 90},
'Daniel': {'cgpa': 3.5,
'completed_credits': 75},
'Sophia': {'cgpa': 3.2,
'completed_credits': 60}
}
"""




"""9. In the upcoming year 2024, a tech company is looking to update its HR records
implemented in Python dictionaries. The company plans to acknowledge and reward
senior employees aged over 55 with a bonus of 10,000 BDT as they approach
retirement. Additionally, a bonus of 5,000 BDT will be granted to employees whose
performance exceeds 95%, and those with a performance below 60% will be terminated
from the records and will receive no bonus.
Compute the total number of employees in the company in 2024, the overall bonus
amount required and show the updated dictionary.

Sample Input 
101: {'name': 'Alice', 'age': 35,
'performance': 90, 'salary': 50000},
102: {'name': 'Bob', 'age': 58,
'performance': 98, 'salary': 70000},
103: {'name': 'Charlie', 'age': 45,
'performance': 85, 'salary': 60000},
104: {'name': 'David', 'age': 60,
'performance': 75, 'salary': 55000},
105: {'name': 'Eve', 'age': 28,
'performance': 92, 'salary': 48000},
106: {'name': 'Frank', 'age': 50,
'performance': 55, 'salary': 52000},
107: {'name': 'Grace', 'age': 62,
'performance': 97, 'salary': 75000},
}


Sample Output
company_hr_register = {
total_employees = 2
total_bonus_amount = 15000
updated_company_hr_register =
{
102: {'name': 'Bob'},
107: {'name': 'Grace'},
}
"""


"""10. A mathematician Meera has found interest in prime numbers. She discovered a really
fascinating concept called Prime Powers. Prime powers are numbers obtained by
multiplying a prime number by itself a certain number of times. For example, is a23
prime power because it is the result of multiplying the prime number 2 by itself three
times which is also a prime number (2 * 2 * 2 = 8). Similarly, all are prime22, 25
powers.
She is trying to create a Python program that takes an integer n as input and generates
a dictionary where the keys are prime numbers and the values are lists containing
all the prime powers from 2 to n. However, she does not want to include the prime
powers that are perfect squares and does not want to display the keys that have no
values. Hint: make sure the value of prime powers are under 100.

Sample Input 
Input =10 

Sample Output
Output:
{
2: [ 8, 32],
3: [ 27],
}
Explanation: Here, no other keys have a prime power whose value is less than 100 and is not a perfect square"""







"""
1. Word Length Dictionary
Take a sentence as input. Create a dictionary where each key is a word from the sentence,
and the value is the length of that word. Print the resulting dictionary.
Sample Input: "Learning Python is fun"
Expected Output: {'Learning': 8, 'Python': 6, 'is': 2, 'fun': 3}
"""
input_sentence = input("Enter a sentence: ")
input_sentence = "Learning Python is fun"
dic ={}
words = input_sentence.split() # convert into List
for word in words:
    dic[word] = len(word)
print(dic)



"""2. Count Vowels in Each Word
Take a sentence as input. Create a dictionary where each key is a word from the sentence,
and the value is the count of vowels in that word.
Sample Input: "Hello world from Python"
Expected Output: {'Hello': 2, 'world': 1, 'from': 1, 'Python': 1}"""
sentence = "Hello world from Python"
words = sentence.split()
vowel_count = {}

for word in words:
    count = 0
    for letter in word:
        if letter.lower() in ['a', 'e', 'i', 'o', 'u']:
            count += 1
    vowel_count[word] = count

print(vowel_count)

"""
3. Student Average Marks
Given a dictionary where each key is a student's name and the value is a list of marks,
calculate and print the average marks for each student.
Sample Input:
student_marks = {
 'Maisha': [85, 90, 78],
 'Jamal': [72, 88, 91],
 'Keya': [95, 87, 93]
}
Expected Output:
Maisha: 84.33
Jamal: 83.67
Keya: 91.67
"""
student_marks = {
    'Maisha': [85, 90, 78],
    'Jamal': [72, 88, 91],
    'Keya': [95, 87, 93]
}

for student, marks in student_marks.items():
    average = sum(marks) / len(marks)
    print(f"{student}: {average:.2f}")



"""
4. Find Words Longer Than a Given Length
Use this sentence: "This is a Python programming example for creating a dictionary"
- Create a dictionary where keys are words and values are their lengths.
- Prompt the user to enter a number.
- Find and store all the words longer than the given number into a list.
- Print that list.
"""

sentence = "This is a Python programming example for creating a dictionary"
dic= {}
words = sentence.split() # list
for keys in words:
    # print(keys)
    dic[keys] = len(keys)
print(dic)

number = int(input("Enter a number: "))
list1 = []
for word in dic.keys():
    if len(word)> number:
        list1.append(word)
print(list1) 


"""5. Create a Person Dictionary
Ask the user to input name, age, and city. Use these inputs to create a dictionary with keys
"name", "age", and "city" and appropriate values. Display the dictionary.
Sample Output: {"name": "Rahim", "age": 25, "city": "Dhaka"}"""
name, age, city = input("Name: "), int(input("Age: ")), input("City: ")

# dic = {
#     "name" : name,
#     "age" : age,
#     "city" : city 

# }
dic = {}
dic.update(name=name, age= age, city= city)
print(dic)



"""6. Add Age to Student Dictionary
Given:
student = {"name": "Farhan", "grade": "A"}
Ask the user for age input and add a new key "age" to the dictionary.
Expected Output: {"name": "Farhan", "grade": "A", "age": 23}"""
student = {"name": "Farhan", "grade": "A"}
student["age"] = 23
print(student)

"""Suppose you have a social network with four people : Sakib, Tamim, Litton and Mashrafe. Tamim is friend to Sakib, Litton and Mashrafe is friend to all. Now create a dictionary with these people names as keys and value it will have a list of people that are friends"""


"""
7. Remove Key from Dictionary
Given a dictionary and a key, remove the key-value pair from the dictionary.
Example: Remove "age" from:
{"name": "Sadia", "age": 22, "city": "Sylhet"}
Expected Output: {"name": "Sadia", "city": "Sylhet"}
"""
a = {"name": "Sadia", "age": 22, "city": "Sylhet"}
a.pop("age")
print(a)


# pop item
a.popitem()
print(a)

"""
8. Check if Key Exists in Dictionary
Given a dictionary and a key, check if the key exists in the dictionary. Print True if it exists,
otherwise print False.
Example:
dictionary = {"name": "Naim", "age": 20, "department": "CSE"}
key = "city"
Expected Output: False
"""
dictionary = {"name": "Naim", "age": 20, "department": "CSE"}

print("city" in dictionary.keys())


"""
9. Student Grade Records
You are creating a simple program to manage student grades. The program should:
Create a list of dictionaries to store student information. Each dictionary should represent a
student and include the following details:
• Name of the student
• Grade of the student
"""
name, grades = input("Name of the student: "), float(input(" Grade of the student: "))
dic= {}
list1 = []
dic.update(Name= name, Grades= grades)
list1.append(dic)
print(list1)


"""
10. Store Inventory Management

You are tasked with creating a simple inventory management program for a store. The
program should perform the following tasks:
Prompt the user to enter the number of items they wish to input.
For each item, ask the user to input:
• The name of the item.
• The quantity of the item.
• The price of the item.
Store each item’s details in a list of dictionaries, where each dictionary contains the item's
name, quantity, and price.
After all items have been entered, display the complete list of items. Allow the user to search
for a specific item by name and display the price of that item. If the item is not found, inform
the user.
"""

shoping = {}
shoping_list = []
name, quantity, price = input("Item Name: "), int(input("Item Quantity: ")), int(input("Item price: "))
# shoping_list.append(shoping)
shoping.update(Name= name, Quantity= quantity, Price= price)
# print(shoping)



# hridoy

itemNumber, itemList = int(input("How many items: ")), []
for x in range(itemNumber):
    itemName, itemQuantity, itemPrice = input("Item'a Name: "), float(
        input("Item's Quantity: ")), float(input("Item's Price: "))
    itemList.append(
        {"Name": itemName, "Quantity": itemQuantity, "Price": itemPrice})
print(itemList)
name = input("Search by item name: ")
message = "Item not found in the list"
for item in itemList:
    if item["Name"] == name:
        message = item["Price"]
print(message)














#
word = "Hello"
freq = {}
for char in word:
    if char in freq:
        freq[char] += 1
    else:
        freq[char] = 1

print(freq)

char= "H"
freq= {"H":1}



1  Write a python program to Iterate over a Dictionary. 
 
 
Input  Output 
{ 
    "Iron Man": "Tony Stark", 
    "Captain America": "Steve Rogers", 
    "Thor": "God of Thunder", 
    "Hulk": "Bruce Banner" 
} 
 
Iron Man: Tony Stark 
Captain America: Steve Rogers 
Thor: God of Thunder 
Hulk: Bruce Banner 
 
 
{ 
    "Pikachu": "Electric", 
    "Charmander": "Fire", 
    "Squirtle": "Water", 
    "Bulbasaur": "Grass/Poison" 
} 
 
Pikachu: Electric 
Charmander: Fire 
Squirtle: Water 
Bulbasaur: Grass/Poison 
 
 
 
* 
2  Write a python program to get the maximum and minimum values of a dictionary. 
 
 
Input  Output 
{'x': 500, 'y': 5874, 'z': 560}  Maximum Value:  5874                                           
Minimum Value:  500 
 
 
* 
3  Write a python program to write a function check_key(d,key) that takes a dictionary d and a key 
key as input and returns True if the key exists in the dictionary, otherwise False. 
 
 
Input  Output 
marvel = { "Iron Man": "Tony Stark", "Captain 
America": "Steve Rogers", "Thor": "God of 
Thunder", "Hulk": "Bruce Banner" } 
Does 'Thor' exist? True 
Does 'Loki' exist? False 
 
 
 
* 
4  Suppose you are given two dictionaries. 
Now create a new dictionary, merging the two dictionaries, so that the original two dictionaries 
remain unchanged. 
 
* 
Input  Output 
dict1 = {"name": "Alice", "age": 25} 
dict2 = {"city": "Wonderland", "age": 30} 
 
merged_dict = {"name": "Alice", "age": 30, "city": 
"Wonderland"} 
 
 
5  Write a python program to combine values in a list of dictionaries. 
 
Input  Output 
dict_list = [ 
    {"a": 10, "b": 20}, 
    {"a": 30, "b": 40}, 
    {"a": 50, "b": 60} 
] 
 
combined_dict = {"a": 90, "b": 120} 
 
 
 
* 
6  Write a python program to remove empty items in the dictionary. Empty items means keys without 
any values(None). 
 
 
Input  Output 
{'Harry': 'Gryffindor', 'Dobby': None, 'Nearly 
Headless Nick': ’Gryffindor’, 'Snape': 'Slytherin', 
‘Cedric’: ‘Hufflepuff, ‘Peeves the Poltergeist’: 
None} 
{'Harry': 'Gryffindor', 'Nearly Headless Nick': 
’Gryffindor’, 'Snape': 'Slytherin', ‘Cedric’: 
‘Hufflepuff} 
 
* 
7  Write a python program to get the highest value. 
 
 
Input  Output 
book_shop = {'sci fi': 12, 'mystery': 15, 'horror': 8, 
'mythology': 10, 'young_adult': 4, 'adventure':14} 
 
The Highest Selling Book genre is mystery and 
the number of books sold are 15 
 
* 
8  Write a python program to  
 
1)  Find out the eye color from the info. 
2)  Find out whether the person has any favorite color which starts with a vowel. Return the 
name of the color if yes, otherwise return False. 
3)  Find out how many areas of interest and what are those. 
4)  Find whether the person has any interest in gadgets. 
5)  Find whether the person has height greater than 5 feet. 
 
 info = { 
 'personal_data': {'name': 'Lauren', 'age': 20, 'major': 'Information Science', 'physical_features': {'color': 
{'eye': 'blue', 'hair': 'brown' }, 'height': "5.8"}}, 
'other': {'favorite_colors': ['purple', 'green', 'blue', ‘indigo’], 'interested_in': ['social media', 'intellectual 
property', 'copyright', 'music', 'books'] } 
} 
* 
9  Write a python program that takes a string as an input from the user and counts the frequency of each 
character using the dictionary. For solving this problem, you need to use each character as a key 
and its frequency as values. [without using count() function] 
 
Input  Output 
"Next semester theke porte boshbo"  { 'n': 1, 'e': 9, 'x': 1, 't': 5, 's': 4, 'm': 1,  
 'h': 2, 'k': 1, 'p': 1, 'o': 3, 'r': 2, 'b': 1} 
"Python programming is fun"  {'p': 2, 'y': 1, 't': 1, 'h': 1, 'o': 2, 'n': 3, 'r': 2, 'g': 2, 
'a': 1, 'm': 2, 'i': 2, 's': 1, 'f': 1, 'u': 1} 
 
* 
10  Write a python program to Convert Key-Value list Dictionary to List of Lists 
 
Input  Output 
friends_dict = { 
    "Rachel Green": [25, "Fashion Designer"], 
    "Ross Geller": [27, "Paleontologist"], 
    "Monica Geller": [26, "Chef"], 
    "Chandler Bing": [28, "Statistical Analyst"], 
    "Joey Tribbiani": [29, "Actor"], 
    "Phoebe Buffay": [26, "Musician"] 
} 
 
friends_list = [ 
    ["Rachel Green", 25, "Fashion Designer"], 
    ["Ross Geller", 27, "Paleontologist"], 
    ["Monica Geller", 26, "Chef"], 
    ["Chandler Bing", 28, "Statistical Analyst"], 
    ["Joey Tribbiani", 29, "Actor"], 
    ["Phoebe Buffay", 26, "Musician"] 
] 
 
* 
11  Write a python program to sort a dictionary by  
1.  Key 
2.  Value 
Input  Output 
sample_dict = {'apple': 5, 'banana': 2, 'orange': 
3, 'grape': 4} 
 
Sorted by Key: {'apple': 5, 'banana': 2, 'grape': 4, 
'orange': 3}  
 
Sorted by Value: {'banana': 2, 'orange': 3, 
'grape': 4, 'apple': 5} 
 
* 
12  Write a python program to extract all the values of a particular key. 
 
 
Input  Output 
[ {"character": "Wednesday Addams", "trait": 
"Dark humor"}, 
    {"character": "Enid Sinclair", "trait": 
"Cheerful"}, 
    {"character": "Thing", "trait": "Helpful"}, 
    {"character": "Xavier Thorpe", "trait": "Artistic"} 
] 
 
Key: “character” 
['Wednesday Addams', 'Enid Sinclair', 'Thing', 
'Xavier Thorpe'] 
 
 
* 
[ 
    {"character": "Eleven", "power": "Telekinesis"}, 
    {"character": "Mike Wheeler", "power": 
"Loyalty"}, 
    {"character": "Will Byers", "power": "Survival"}, 
    {"character": "Max Mayfield", "power": 
"Bravery"} 
] 
 
Key: “power” 
['Telekinesis', 'Loyalty', 'Survival', 'Bravery'] 
 
 
 
13  Write a Python program to group the elements of a given list based on the given function. 
 
 
Input  Output 
Original list & function: 
[7, 23, 3.2, 3.3, 8.4]  Function name: floor 
 
Group the elements of the said list based on the 
given function: 
{7: [7], 23: [23], 3: [3.2, 3.3], 8: [8.4]} 
 
Original list & function: 
['Red', 'Green', 'Black', 'White', 'Pink']  Function 
name: len: 
Group the elements of the said list based on the 
given function: 
{3: ['Red'], 5: ['Green', 'Black', 'White'], 4: ['Pink']} 
 
 
** 
14  Write a Python program to sort a nested dictionary by value. 
 
Input  Output 
nested_dict = {'a': {'key': 3}, 'b': {'key': 1}, 'c': 
{'key': 2}} 
{'b': {'key': 1}, 'c': {'key': 2}, 'a': {'key': 3}} 
 
 
** 
15  Write a Python program to  
1.  convert a list of tuples into a dictionary. 
2.  Sort the dictionary with its value in descending order. 
 
 
Input  Output 
Original List of Tuples: 
[('Rabbit', 7), ('Elephant', 15), ('Squirrel', 3), 
('Cat', 9), ('Dog', 12)] 
 
Converted Dictionary: 
{'Rabbit': 7, 'Elephant': 15, 'Squirrel': 3, 'Cat': 9, 
'Dog': 12} 
 
Sorted Dictionary (descending): 
{'Elephant': 15, 'Dog': 12, 'Cat': 9, 'Rabbit': 7, 
'Squirrel': 3} 
 
** 
16  The UIU database contains student data in the form of a dictionary. Each key is a student's name, 
and the corresponding value is another dictionary with the following information: the student's name, 
major, CGPA (Cumulative Grade Point Average), and completed credits. 
As a software engineer working at UIU, you are tasked with optimizing this dictionary by removing 
** 
redundancy
Write a Python program that: 
1.  Creates a new dictionary with the same student names as keys. 
2.  For each student, extracts only the "cgpa" and "completed_credits" information as the value. 
3.  Sorts the new dictionary based on CGPA in descending order. 
 
Input  Output 
uiu_database = { 
    "Jake Peralta": { 
        "name": "Jake Peralta", 
        "major": "Detective Work", 
        "cgpa": 3.8, 
        "completed_credits": 120 
    }, 
    "Amy Santiago": { 
        "name": "Amy Santiago", 
        "major": "Detective Work", 
        "cgpa": 4.0, 
        "completed_credits": 125 
    }, 
    "Terry Jeffords": { 
        "name": "Terry Jeffords", 
        "major": "Administration", 
        "cgpa": 3.9, 
        "completed_credits": 110 
    }, 
    "Rosa Diaz": { 
        "name": "Rosa Diaz", 
        "major": "Undercover Operations", 
        "cgpa": 3.85, 
        "completed_credits": 100 
    } 
} 
optimized_database = { 
    "Amy Santiago": {"cgpa": 4.0, 
"completed_credits": 125}, 
    "Terry Jeffords": {"cgpa": 3.9, 
"completed_credits": 110}, 
    "Rosa Diaz": {"cgpa": 3.85, 
"completed_credits": 100}, 
    "Jake Peralta": {"cgpa": 3.8, 
"completed_credits": 120} 
} 
 
 
 
17  In the upcoming year, 2024, a tech company is planning to update its HR records, which are 
implemented in Python dictionaries. The company intends to acknowledge and reward senior 
employees aged over 55 with a bonus of 10,000 BDT as they approach retirement. Additionally, a 
bonus of 5,000 BDT will be granted to employees whose performance exceeds 95%, and those with 
performance below 60% will be terminated from the records and will receive no bonus. 
Write a Python program that: 
1.  Identifies employees aged over 55 and grants them a bonus of 10,000 BDT. 
2.  Grants an additional bonus of 5,000 BDT to employees with performance exceeding 95%. 
3.  Terminates employees whose performance is below 60% from the records and excludes 
them from the bonus. 
4.  Computes and displays: 
○  The total number of employees eligible for bonuses in 2024. 
○  The total bonus amount required to be given to the eligible employees. 
○  The updated HR records with only the employees eligible for bonuses. 
 
** 
Input
company_hr_register ={  
 
101: {'name': 'Alice', 'age': 35, 'performance': 90, 
'salary': 50000},  
 
102: {'name': 'Bob', 'age': 58,'performance': 98, 
'salary': 70000}, 
 
103: {'name': 'Charlie', 'age': 45, 'performance': 
85, 'salary': 60000},  
 
104: {'name': 'David', 'age': 60, 'performance': 
75, 'salary': 55000},  
 
105: {'name': 'Eve', 'age': 28, 'performance': 92, 
'salary': 48000},  
 
106: {'name': 'Frank', 'age': 50, 'performance': 
55, 'salary': 52000},  
 
107: {'name': 'Grace', 'age': 62, 'performance': 
97, 'salary': 75000} 
 
 } 
Total Employees = 3 
Total Bonus Amount = 40000 
 
Updated Company HR Register = {102: {'name': 
'Bob'}, 104: {'name': 'David'}, 107: {'name': 
'Grace'}} 
 
 
18  Write a Python program that: 
●  Ranks the heroes based on their total score in descending order. 
●  Calculates the average combat score of all universes. 
●  Finds the hero with the highest strategy score and the universe they belong to. 
●  Modifies the dictionary to add a new key "overall_rating" to each universe, which is the 
sum of score, combat, and strategy. 
universes = { 
"Earth-616": {"hero": "Spider-Man", "score": 89, "challenges": {"combat": 45, "strategy": 44}},  
"Earth-199999": {"hero": "Iron Man", "score": 95, "challenges": {"combat": 50, "strategy": 45}}, 
"Earth-1610": {"hero": "Miles Morales", "score": 78, "challenges": {"combat": 38, "strategy": 40}}, 
"Earth-928": {"hero": "Spider-Man 2099", "score": 92, "challenges": {"combat": 48, "strategy": 44}}, 
"Earth-TRN123": {"hero": "Deadpool", "score": 85, "challenges": {"combat": 43, "strategy": 42}} 
} 
Output 
Hero Rankings (by total score): 
1. Iron Man (Earth-199999) - 190 
2. Spider-Man 2099 (Earth-928) - 184 
3. Spider-Man (Earth-616) - 178 
4. Deadpool (Earth-TRN123) - 170 
5. Miles Morales (Earth-1610) - 156 
*** 
Average Combat Score: 44.8 
 
Highest Strategy Score: 
Iron Man (Earth-199999) - 45 
 
Updated Universes with Overall Ratings: 
{ 
Earth-616: {'hero': 'Spider-Man', 'score': 89, 'challenges': {'combat': 45, 'strategy': 44}, 
'overall_rating': 178} 
Earth-199999: {'hero': 'Iron Man', 'score': 95, 'challenges': {'combat': 50, 'strategy': 45}, 
'overall_rating': 190} 
Earth-1610: {'hero': 'Miles Morales', 'score': 78, 'challenges': {'combat': 38, 'strategy': 40}, 
'overall_rating': 156} 
Earth-928: {'hero': 'Spider-Man 2099', 'score': 92, 'challenges': {'combat': 48, 'strategy': 44}, 
'overall_rating': 184} 
Earth-TRN123: {'hero': 'Deadpool', 'score': 85, 'challenges': {'combat': 43, 'strategy': 42}, 
'overall_rating': 170} 
} 
 
 
19  Meera, a mathematician, has recently developed an interest in prime numbers. She has come across 
a fascinating concept called Prime Powers. Prime powers are numbers obtained by multiplying a 
prime number by itself a certain number of times. For example, 23=82^3 = 823=8 is a prime power 
because it is the result of multiplying the prime number 2 by itself three times. Similarly, 32=93^2 = 
932=9 and 52=255^2 = 2552=25 are prime powers. 
Meera wants to create a Python program that takes an integer n as input and generates a dictionary 
where: 
●  The keys are prime numbers. 
●  The values are lists containing all the prime powers of that prime from 2 to n (inclusive), but 
excluding perfect squares. 
Furthermore, she wants the dictionary to only include prime numbers as keys that have at least 
one valid prime power under 100. 
Write a Python program that: 
1.  Accepts an integer n as input. 
2.  Generates a dictionary with prime numbers as keys and their respective prime powers as 
values, excluding perfect squares. 
3.  Ensure that the prime powers are under 100. 
 
Input  Output 
Enter a number n: 30 
 
 
 
 
Prime powers dictionary: 
{2: [8, 32], 3: [27], 5: [25], 7: [49], 11: [121]} 
Enter a number n: 50  Prime powers dictionary: 
*** 
{2: [8, 32], 3: [27], 5: [25], 7: [49], 11: [121], 13: 
[169], 17: [289]} 
 
 
20  BONUS FUN QUESTION  
Daredevil Dress-Up Game 
In this task, you are building a fun "dress-up" game for Daredevil. The player will select different 
clothing items for Daredevil (headgear, upper body, lower body, shoes, and weapon) from predefined 
categories. Each clothing item influences Daredevil's stats, which include Strength, Stealth, and 
Agility. However, there are some restrictions and conditions that must be followed when making 
selections. 
Task: 
You need to design a system where the player can choose items from different clothing categories, 
taking into account the following conditions: 
Conditions: 
1.  Exclusive Choices: Some items cannot be worn together. For example: 
○  Red mask cannot be worn with red pants. 
○  Red suit unlocks the cane weapon. 
○  Black jacket cannot be worn with red boots. 
2.  If the user selects conflicting items, notify them with an appropriate message and prompt 
them to choose again. 
3.  Item Unlocking: 
○  Selecting the red suit unlocks the cane weapon. Ensure that this unlocking 
mechanism works properly. 
4.  Default Options: 
If the user does not make any selection for a category (by pressing Enter), the default option 
should be automatically selected as 'none'. 
5.  Stat Modifications: 
Each clothing item affects Daredevil's stats: 
○  Red mask: +5 Stealth 
○  Red suit: +10 Strength 
○  Red pants: +3 Agility 
○  Red boots: +2 Agility 
○  Cane: +7 Strength 
6.  Final Output: 
After the player has made their selections, output Daredevil's full outfit (with each item 
selected) and the updated stats (Strength, Stealth, Agility). 
clothing = { 
"headgear": ["red mask", "black helmet", "none", "yellow helmet"], "upper_body": ["red suit", "black 
jacket", "none"], "lower_body": ["red pants", "black pants", "hawaiian pants", "none"], "shoes": ["red 
boots", "black boots", "none"], "weapon": ["cane", "none"] 
} 
stats = { "Strength": 0, "Stealth": 0, "Agility": 0 } 
*** 
Input  Output 
Choose a headgear from the following options: red mask, black 
helmet, none 
Enter your choice for headgear: red mask 
 
Choose a upper_body from the following options: red suit, black 
jacket, none 
Enter your choice for upper_body: red suit 
 
Choose a lower_body from the following options: red pants, 
black pants, none 
Enter your choice for lower_body: black pants 
 
Choose a shoes from the following options: red boots, black 
boots, none 
Enter your choice for shoes: red boots 
 
Choose a weapon from the following options: cane, none 
Enter your choice for weapon: cane 
 
 
 
Daredevil's Outfit: 
Headgear: Red mask 
Upper_body: Red suit 
Lower_body: Black pants 
Shoes: Red boots 
Weapon: Cane 
 
Daredevil's Stats: 
Strength: 17 
Stealth: 5 
Agility: 5 
 
